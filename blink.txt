push 36
pop ax ; pixels x
push 16
pop bx ; pixels y
push 448
pop cx ; video_mem
push 3
pop rx ; radius

push ax
push 2
div
pop [2] ; x center

push bx
push 2
div
pop [3] ; y center

push 0
push 0

pop [0] ; x = 0
pop [1] ; y = 0

push 1
pop ix  ; incrementation coef

loop:
    push 0
    pop [69]
    push 0
    pop [70]
    call :cls

    push ix
    push rx
    add
    pop rx ; changing radius

    push rx
    push 10
    jb :notBig
    push -1
    pop ix ; change inc direction

    notBig:
        push rx
        push 2
        ja :notSmall
        push 1
        pop ix ; change inc direction

    notSmall:
        push 0
        pop [0]
        push [0]
        pop [1]

        call :fillvid
        drw
        jmp :loop
hlt

fillvid:
    call :isInside

    push [0]
    push ax
    jb :nonInc ; no need to increment y
    push [1]
    push 1
    add
    pop [1] ; increment y

    push 0
    pop [0] ; x to zero

nonInc:
    push [0]
    push 1
    add
    pop [0]

    push [1]
    push bx
    jb :fillvid
    ret

isInside:
    push [0]
    push [2]
    sub

    push [0]
    push [2]
    sub

    mul      ; x^2

    push [1]
    push [3]
    sub

    push [1]
    push [3]
    sub
    mul      ; y^2

    add      ; x^2 + y^2

    sqrt
    push rx
    jbe :fillAt

    ret

fillAt:
    push [1]
    push ax
    mul

    push [0]
    add

    push cx
    add

    pop tx

    push rx
    push 97
    add
    push rx   ; 0x[rx]
    push 256
    mul       ; 0x10 * rx - color index in second byte
    add

    pop [tx]
    ret

cls: ; fills screen with zeroes
    push [70] ; y
    push ax
    mul

    push [69] ; x
    add

    push cx
    add
    pop tx

    push tx
    push 1024
    jae :clsEnd

    push 0
    pop [tx]

    push [70]
    push ax
    jb :nonIncCls ; no need to increment y
    push [70]
    push 1
    add
    pop [70] ; increment y

    push 0
    pop [69] ; x to zero

nonIncCls:
    push 1
    push [69]
    add
    pop [69]
    jmp :cls
clsEnd:
    ret
