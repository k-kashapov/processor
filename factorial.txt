in

pop ax
push ax
pop bx
call :fact
push bx

out
hlt

fact:
  ; check if ax is 1 and end if true
  push ax
  push 1
  jbe :konec

  ; decrement ax
  push ax
  push 1
  sub

  ; save ax to register
  pop ax
  push ax

  ; multiply bx by ax and save
  push bx
  mul
  pop bx
  call :fact

konec:
  ret

; #######################
  ; printing 2nd:
    push [3] ; center y
    push [0] ; sin fi
    sub      ; -
    push ax  ; pixels in line
    mul      ; * = new y

    push [1] ; cos fi
    push [2] ; x center
    sub      ; -
    add      ; add y to x

    out ; debug

    push cx  ; video_mem
    add      ; offset in video

    pop ex   ; saving in ex
    push 42  ; pushing asterisk
    pop [ex] ; saving to video mem

    ; printing 3rd:
    push [3] ; center y
    push [1] ; cos fi
    add      ; +
    push ax  ; pixels in line
    mul      ; * = new y

    push [0] ; sin fi
    push [2] ; x center
    add      ; +
    add      ; add y to x

    out ; debug

    push cx  ; video_mem
    add      ; offset in video

    pop ex   ; saving in ex
    push 42  ; pushing asterisk
    pop [ex] ; saving to video mem

    ; printing 4th:
    push [3] ; center y
    push [1] ; cos fi
    sub      ; -
    push ax  ; pixels in line
    mul      ; * = new y

    push [0] ; sin fi
    push [2] ; x center
    sub      ; -
    add      ; add y to x

    out ; debug

    push cx  ; video_mem
    add      ; offset in video

    pop ex   ; saving in ex
    push 42  ; pushing asterisk
    pop [ex] ; saving to video mem
